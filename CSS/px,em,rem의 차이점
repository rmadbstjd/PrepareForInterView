우선 상대 단위에 대한 설명부터 드리겠습니다.

상대 단위란 어떠한 기준에 따라 크기가 상대적으로 변하는 단위입니다.

대표적으로 em, rem, %, vw, vh 등이 있습니다.

반대로 절대 단위란 고정된 값을 갖고 있어 크기가 변하지 않는 단위입니다.

그리고, em과 rem ! 이름부터 비슷한만큼 em과 rem에는 공통점이 있는데요

바로 CSS의 font-size의 값에 비례해서 결정되는 단위라는 점입니다.

예를 들어 font-size가 16px인 경우, 1em = 16px, 2em =32px로 계산됩니다.

공통점이 있으면 차이점이 있듯이

정확히 어디에 있는 font-size 속성 값을 기준으로 하는지에 따라 차이가 발생합니다.

em의 경우, 해당 단위가 사용되는 요소의 font-isze 값을 기준으로 하고,

rem의 경우, r은 root의 약자이며 최상위 요소의 font-size 값을 기준으로 합니다.

HTML에서 최상위 단위는 <html>이다. 따라서 rem의 경우, html 요소의 font-size 속성 값이 기준이 됩니다.

예를 들어, 다음과 같이 html 요소의 font-size 속성 값이 16px이라고 가정해보자.

html {

font-size : 16px;

}

그리고 다음과 같이 div 요소가 스타일링되면,  width 속성 값은 200px이 된다.

div {

font-size : 20px;

width : 10em;  /* === 200px; */

}

하지만 rem 단위를 사용하면 width 속성 값은 160px이 된다.

div {

font-size : 20px;

width : 10rem;  /* === 160px; */

}

이때, div 요소에서 font-size 속성을 제거하면 어떻게 될까?

rem의 경우 해당 요소의 font-size가 아닌 html의 font-size를 따르기 때문에 달라질 게 없다.

div {

width : 10rem; /* 160px; *

}

어떤 요소에 font-size 속성 값이 정의되지 않는 경우, 부모의 font-size 값을 그대로 상속받게 된다.

따라서 html 요소의 font-size가 16px이기 때문에 div 요소의 font-size는 16px이 되고,

width : 10em의 값은 160px이 된다.

그럼 em과 rem중 어떤걸 사용하면 좋을까요?

CSS가이드라인에 따르면, em을 사용해야만하는 타당한 근거가 없다면 가급적 rem을 우선적으로 사용하라고 권고하고 있습니다. 왜냐하면 앞서 이유를 보았듯이, 실제 몇 px로 변환될지에 대한 영향을 주는 변수가 많아질 수 있기 때문에 em을 사용해서 스타일링을 한 경우,  재사용이 어렵고 유지 보수가 힘들 수 있기 때문입니다.

em과 rem의 공통점

px나 pt와 같은 절대 단위를 쓰는 것 보다 낫다라는 생각으로 em과 rem을 혼용해서 사용하는 경우가 많은데 사실 브라우저에서 이 두 단위가 같은 길이로 계산될 때가 많고, 큰 차이가 나지 않아서 그럴 수 있다.

em과 rem은 CSS의 font-size의 속성 값에 비례해서 결정되는 상대 단위이다.

예를 들어, font-size가 16px인 경우, 상대 단위는 브라우저에서 다음과 같이 계산된다.

0.5em = 16px x 0.5= 8px

1em = 16px x 1= 16px

2em = 16px x 2 = 32px

위와 같이 font-size 값의 증감에 비례해서 유동적으로 길이가 결정되고 싶은 속성에 em이나 rem을 사용해서 길이를 지정해줄 수 있다.

em과 rem의 차이점

em과 rem의 단위의 기준은 font-size 속성 값이라고 했는데, 정확히 어디에 있는 font-size 속성 값인지에 따라 차이가 발생한다. em의 경우, 해당 단위가 사용되는 요소의 font-size 속성 값이 기준이 된다.

반면, rem의 r은 root, 즉 최상위 요소의 font-size 값을 의미한다.

HTML에서 최상위 단위는 <html>이다. 따라서 rem의 경우, html 요소의 font-size 속성 값이 기준이 된다.

예를 들어, 다음과 같이 html 요소의 font-size 속성 값이 16px이라고 가정해보자.

html {

font-size : 16px;

}

그리고 다음과 같이 div 요소가 스타일링되면,  width 속성 값은 200px이 된다.

div {

font-size : 20px;

width : 10em;  /* === 200px; */

}

하지만 rem 단위를 사용하면 width 속성 값은 160px이 된다.

div {

font-size : 20px;

width : 10rem;  /* === 160px; */

}

이때, div 요소에서 font-size 속성을 제거하면 어떻게 될까?

rem의 경우 해당 요소의 font-size가 아닌 html의 font-size를 따르기 때문에 달라질 게 없다.

div {

width : 10rem; /* 160px; *

}

하지만 em을 사용할 경우, 약간의 상상력이 필요하다. 왜냐하면 없는 font-size 속성 값을 고려해야 하기 때문이다.

어떤 요소에 font-size 속성 값이 정의되지 않는 경우, 부모의 font-size 값을 그대로 상속받게 된다.

따라서 html 요소의 font-size가 16px이기 때문에 div 요소의 font-size는 16px이 되고,

width : 10em의 값은 160px이 된다.

하지만 html 요소와 해당 div의 사이에 다른 요소들이 층층이 껴있으면 어떻게 될까?

예를 들어, header 요소가 이 둘 사이에 껴있고, header 요소의 font-size가 30px이라면,

div 요소의 font-size도 30px로 상속이 되어서, width 값은 300px이 된다.

만약, 이 header 요소의 font-size가 절대 단위가 아닌 상대 단위를 사용하면 어떻게 될까?

header의 font-size가 30px이 아닌 2rem을 사용하고 있다면, 16px x 2 = 32px이 되고,

div 요소의 font-size도 32px로 상속 받기 때문에 width는 결국 320px이 된다.

이처럼 em을 사용할 땐 font-size가 html 요소부터 시작해 

여러 상위 요소들을 거칠 수 있기 때문에 실제로 어떠한 값이 계산될지 예측하기 복잡할 때가 있다.

그럼 em과 rem중 어떤걸 사용해야 할까?

CSS가이드라인에 따르면, em을 사용해야만하는 타당한 근거가 없다면 가급적 rem을 우선적으로 사용하라고 권고하고 있다. 왜냐하면 앞서 이유를 보았듯이, 실제 몇 px로 변환될지에 대한 영향을 주는 변수가 많아질 수 있기 때문에 em을 사용해서 스타일링을 한 경우,  재사용이 어렵고 유지 보수가 힘들 수 있기 때문이다.