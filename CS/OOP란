객체 지향 프로그래밍(OOP)가 뭐에요?

OOP는 Object Oriented Programming의 약자로, 객체 지향 프로그래밍이라고도 합니다.

프로그래밍에서 필요한 데이터를 추상화시켜 상태와 행위를 가진 객체를 만들고,

그 객체들 간의 유기적인 상호작용을 통해 로직을 구성하는 방법입니다.

1.객체 지향 프로그래밍의 장,단점을 간단하게 설명해주세요.

장점

1. 코드 재사용이 용이합니다.

남이 만든 클래스를 가져와 이용할 수 있고, 상속을 통해 확장해서 사용할 수 있기 때문입니다.

1. 유지보수가 쉽습니다.

캡슐화를 통해 외부에 영향을 주지 않을 수 있으므로

1. 대형 프로젝트에 적합합니다.

클래스 단위로 모듈화시켜서 개발할 수 있으므로 여러 사람이 참여하는 프로젝트에 적합합니다.

단점

1. 설계시 많은 노력과 시간이 필요합니다.

다양한 객체들의 상호작용을 통해 프로그래밍이 구성되므로

1. 실행 속도가 상대적으로 느립니다.

객체를 많이 만들어 놓으니 절차지향적언어에 비해 실행 속도가 많이 느립니다.

절챠지향적언어는 초기 프로그래밍 언어로 컴퓨터 처리 구조와 비슷해 실행 속도가 빠름

2.클래스와 인스턴스(객체)는 무엇인지 설명해주세요.

클래스란 어떠한 문제를 해결하기 위한 데이터를 만들기 위해 추상화를 거쳐 집단에 속하는

속성(Attribute)과 행위(Behavior)를 변수와 메서드로 정의한 것입니다.

인스턴스(객체)란 클래스에서 정의한 것을 토대로 실제 메모리에 할당한 것으로 실제 프로그램에서 사용되는 데이터입니다.

3.객체지향에서의 추상화란 무엇인가요?

구체적인 사물들의 공통적인 특징을 파악해서 이를 하나의 개념으로 다루는 것입니다.

각 개체의 구체적인 개념에 의존하지 않고 추상적인 개념에 의존해야 설계를 유연하게 할 수 있습니다.

4.캡슐화가 무엇인가요?

클래스라는 캡슐에 속성과 행위(Method)를 하나로 묶고, 실제 구현 내용 일부를 외부에 감추어 은닉하는 것입니다.

캡슐화를 통해 코드를 수정없이 재활용을 할  수 있으며, 정보 은닉을 통해

높은 응집도와 낮은 결합도를 갖도록 합니다.

응집도 : 클래스나 모듈 안의 요소들이 얼마나 밀접하게 관련됐는지

결합도 : 어떤 기능을 실행하는데 다른 클래스나 모듈에 얼마나 의존적인지

정보 은닉은 private 키워드를 사용해 필요가 없는 정보는 외부에서 접근하지 못하도록 하여

결합도를 낮출 수 있다.

결합도가 높을 수록 한 클래스에서 변경이 일어나면 이에 의존하는 다른 클래스들에 문제가 발생할 가능성이 커지므로 낮을수록 좋다.

5.상속화가 무엇인가요?

상속은 부모 클래스의 속성과 기능을 그대로 이어받아 사용할 수 있게 하고, 

기능의 일부분을 변경해야 할 경우 상속받은 자식 클래스에서 해당 기능만 다시 수정하여 사용할 수 있게 하는 것입니다.

6.다형성은 무엇인가요?

하나의 변수명, 함수명이 상황에 따라 다른 의미로 해석될수 있다는 것입니다.

다형성을 구현하는 방법은 대표적으로 오버로딩, 오버라이딩 등이 있습니다.

오버로딩 : 같은 이름의 메소드를 여러개 가지면서 매개변수의 유형과 개수가 다르도록 하는 기술

오버라이딩 : 상위 클래스의 메소드를 하위 클래스에서 재정의하여 사용하는 기술

7.getter와 setter를 사용하는 이유는 무엇인가요?

멤버 변수에 직접 접근하지 못하도록 private로 접근 지정자를 선택하고, public으로 getter ,setter

메서드를 만드는 방법을 많이 사용해왔습니다.

getter와 setter를 사용하면 메서드를 통해서 접근하기 때문에, 메서드 안에서 매개변수와 같이 어떤 올바르지 않은 입력에 대해 사전에 처리할 수 있기 때문입니다.