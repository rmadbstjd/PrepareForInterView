MVC 패턴은 어플리케이션을 세 가지 주요 논리 구성인 Model, View, Controller로 분리하는 아키텍쳐입니다.

이렇게 각각의 역할을 나누어 코드를 분리하면 유지보수와 개발효율이 좋아질 수 있습니다.

Model은 View에 표시되기 위한 데이터와 그 데이터를 처리하는 부분입니다.

View는 사용자에게 보여지는 UI 부분입니다.

Controller는 사용자에게 입력을 받고 처리하는 부분입니다.

MVC 패턴의 동작 순서는 다음과 같습니다.

1. 사용자의 Action들은 Controller에 들어옵니다.
2. Controller는 사용자의 Action을 확인하고 Model을 업데이트합니다.
3. Controller는 Model을 나타내 줄 View를 선택합니다.
4. View는 Model을 이용하여 화면을 나타냅니다.

MVC 패턴의 특징으로는 다음과 같습니다.

Controller는 여러 개의 View를 선택할 수 있는 1:N 구조입니다.

Controller는 View를 선택할 뿐 업데이트 하지 않습니다.

MVC 패턴의 장점으로는 보편적으로 사용되는 패턴인만큼 단순합니다.

MVC 패턴의 단점으로는 View와 Model 간의 의존성이 높다는 점입니다.

View와 Model의 의존성이 높을수록 어플리케이션의 규모가 커질수록 복잡하고 유지 보수가 어려울 수 있습니다.

MVVM 패턴은  Model, View, ViewModel로 분리하는 아키텍쳐입니다.

View는 사용자에게 보여지는 UI부분이며

Model은 어플리케이션에서 사용되는 데이터와 비즈니스 로직을 처리하는 부분이며

ViewModel은 View를 표현하기 위해 만들어진 View를 위한 Model입니다.

View와는 바인딩을 하여 연결 후 View에게서 액션을 받고 또한 View를 업데이트합니다.

MVVM 패턴의 동작은 다음과 같이 이루어집니다.

1. 사용자의 Action이 View를 통해 들어옵니다.
2. View에 Action이 들어오면, ViewModel에 Action을 전달합니다.
3. ViewModel은 Model에 필요한 데이터를 요청합니다.
4. Model은  ViewModel에 요청된 데이터를 응답합니다.
5. ViewModel은 응답 받은 데이터를 가공하여 저장합니다.
6. View는 View Model과의 데이터 바인딩을 통해 UI를 자동으로 업데이트합니다.

MVVM 패턴의 장점은 다음과 같습니다.

View와 Model이 서로 알지 못하기에 독립성을 유지할 수 있습니다.

View와 ViewModel의 바인딩을 사용해 View와 ViewModel의 의존성을 없앨 수 있습니다.

View와 ViewModel을 바인딩하기 때문에 코드의 양이 줄어듭니다.

MVVM 패턴의 단점으로는 간단한 UI에서는 오히려 ViewModel을 설계하는데 어려움이 있을 수 있고, 데이터 바인딩이 필수적으로 요구됩니다.

데이터바인딩이란?

쉽게 말해 Model과  UI 요소 간의 싱크를 맞춰주는 것이라고 생각할 수 있습니다.

이 패턴을 통해 View와 로직이 분리되더라도 한 쪽만 바뀌면 다른 한 쪽도 업데이트가 이루어져 일관성을 유지할 수 있습니다.