CSR은 Client Sid Rendering의 약자로, 첫 로드시, 모든 리소스(html,css,javascript)를 다운받습니다.

그 이후 빈 HTML 파일에 JS를 이용하여 DOM을 동적으로 생성하여 렌더링합니다.

따라서 SPA에 적합한 환경입니다.

장점

JS를 이용해 DOM을 그려내기 때문에 원하는 내용만 업데이트할 수 있습니다.

예를 들어 링크 이동을 했을 때, 헤더,푸터와 같이 중복되는 내용들은 고정으로 두고

그 안의 내용들만 업데이트할 수 있습니다.

단점

하나의 HTML 파일로 작동하다보니 각각의 페이지에 대한 정보를 담기 힘들어 SEO에 불리합니다.

또한 첫 로드시 모든 리소스를 다운받기 때문에 첫 진입 속도가 느립니다.

SSR은 Server Side Redering의 약자로, 말 그대로 서버에서 렌더링 준비를 완성한 후 클라이언트에 HTML 파일을 전달하는 방식입니다.

클라이언트에서 요청할때 마다 HTML 파일을 응답하기 때문에 페이지가 여러 개 입니다.

따라서 MPA 구동 방식과 관계가 있습니다.

장점

SSR은 이미 렌더링을 완료한 HTML 파일을 응답하기 때문에 초기 진입 속도가 빠릅니다.

서버에서 렌더링을 완료한 HTML 파일을 응답하기 때문에 각 페이지에 대한 정보를 미리 입력하여 SEO에 유리합니다.

단점

페이지 이동시 HTML 파일 자체를 응답 받기 때문에 화면 깜빡거림이 있습니다.

또한 헤더,푸터 처럼 중복되는 내용도 예외없이 다시 렌더링하여 성능이 조금 떨어집니다.

또한 완성된 HTML 파일을  JS보다 먼저 받아오기 때문에 JS 파일이 다운받고 실행될떄 까지

기능이 작동하지 않습니다.

다만 이러한 CSR과 SSR의 장점을 합쳐놓은 프레임워크들이 있습니다.

Next의 경우 React로 만든 어플리케이션을 정적인 페이지로 만들어 서버에 배포할 수 있어

SEO를 최적화할 수 있습니다.