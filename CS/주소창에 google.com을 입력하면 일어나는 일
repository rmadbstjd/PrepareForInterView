우선 과정을 알기 전에 용어 정리부터 해보자.

DNS(Domain Name System Server)

‘도메인 이름 시스템 서버’는 URL들의 이름과 IP주소를 저장하고 있는 데이터베이스로,

웹사이트를 위한 주소록이다.

숫자로 된 IP 주소(63.245.232.123)대신  사용자가 이해하기 편리하도록 주소를 매핑해주는

역할을 한다.

TCP/IP(TransmissionControl Protocol / Internet Protocol)

‘전송제어규약’과 ‘인터넷규약’은 데이터가 어떻게 웹을 건너 여행하는지 정의하는 통신 규약이다.

이를 사용하겠다는 것은 IP 주소 체계를 따르며 TCP의 특성을 활용해 송신자와 수신자의 논리적 연결을 생성하고 신뢰성을 유지할 수 있도록 하겠다는 의미이다.

 즉 송신자가 수신자에게 IP주소를 사용해서 데이터를 전달하고 그 데이터가 제대로 갔는지에 대해 이야기하는 것이다.

HTTP(HyperText Transfer Protocol)

클라이언트와 서버가 서로 통신할 수 있게 하기 위한 언어를 정의하는 어플리케이션 규약으로,

쉽게 말해 요청과 응답으로 이루어져있어 “어떤 데이터 주세요” 라고 요청하면, “여기 데이터 줄게요”라고 응답하는 과정이다.

주로 HTML 문서를 주고 받는데에 사용한다.

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/9ace0da5-b9e3-4dde-8d81-2a44b8b9ebe0/Untitled.png)

웹 동작 방식

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/aa672593-0e3d-4b2d-ad70-9a5406f69e47/Untitled.png)

1. 사용자가 웹 브라우저 검색창에 GOOGLE.COM을 입력

2. 웹 브라우저는 캐싱된 DNS 기록들을 통해 입력받은 도메인주소와 대응하는 IP주소를 확인

4가지의 캐시에서 확인하는데,

1) 가장 먼저 브라우저 캐시를 확인한다.

기존에 google.com을 방문했다면,  구글에 빠르게 접근할 수 있는 내용들이 저장되어있습니다.

2) 그 다음에 브라우저는 OS 캐시를 확인한다.

브라우저 캐시에서 찾을 수 없으면, OS 캐시를 확인합니다. OS 캐쉬란 운영체제 안에 있는 캐시로

systemcall을 통해 접근할 수 있습니다.

3) 그 다음에 router 캐시를 확인한다.

라우터란 집에서 사용하는 공유기라고 생각하면 되는데 거기서도 DNS 내용들을 저장합니다.

4) 그래도 못 찾는다면 마지막으로 ISP 캐시를 확인한다.

ISP는 인터넷을 제공하는 회사라고 생각하면 됩니다. KT, SK, LG 등

2. 요청한 URL이 캐시에 없으면, DNS Query를 통해 IP 주소를 찾습니다.

google.com에 접속하고 싶으면 반드시 대응하는 IP 주소를 알아야 한다.

DNS query의 목적은 여러 다른 DNS 서버들을 검색해서 해당 사이트의 IP 주소를 찾는 것이다.

3. 브라우저가 서버와 TCP Connection을 합니다.

브라우저가 올바른 IP 주소를 받게 되면  HTTP Connection을 통해 서버와 연결합니다.

HTTP 연결의 경우, 대표적인 인터넷 프로토콜인 TCP를 일반적으로 사용합니다.

TCP/IP three-way handshake 라는 프로세스를 통해서 클라이언트와 서버간 connection이 이루어지게 된다.

단어 그대로 클라이언트와 서버가 SYN과 ACK 메시지들을 가지고 3번의 프로세스를 거친 후에 연결이 되는 것입니다.

**TCP/IP three-way handshake에 대해 설명해주세요

1) 클라이언트가 SYN 패킷을 서버에 보내고, connection을 열어달라고 물어본다.

2) 서버가 새로운 connection을 시작할 수 있는 포트가 있다면 SYN/ACK 패킷으로 응답한다.

3) 클라이언트는 SYN/ACK 패킷을 서버로부터 받으면 서버에게 ACK 패킷을 보냅니다.

4. 브라우저가 웹 서버에 HTTP 요청을 날린다.

클라이언트의 브라우저는 GET 요청을 통해 서버에게 [google.com](http://google.com) 웹 페이지를 요구한다.

5. 서버가 요청을 처리하고 response를 생성한다.

요청과 요청의 헤더, 쿠키를 읽어서 요청이 무엇인지 파악하고,

필요하다면 서버에 정보를 업데이트한다.

그 다음 response를 특정한 포맷으로 작성한다.(JSON, XML, HTML)

6. 서버가 HTTP response를 보낸다.

서버의 response에는 요청한 웹 페이지, status Code 등이 포함된다.

7.  브라우저가 HTML Content를 보여준다.

브라우저는 HTML content를 단계적으로 보여준다.

처음에는 HTML의 스켈레톤을 렌더링한다.

그 다음에는 HTML Tag들을 체크하고 나서 추가적으로 필요한 웹 페이지 요소들을

get으로 요청한다.

이 정적인 파일들은 브라우저에 의해 캐싱이 되서 나중에 해당 페이지를 방문할 때

다시 서버로부터 불러와지지 않도록 한다.

그 다음 그토록 원하는 google.com의 모습이 보이게 된다!