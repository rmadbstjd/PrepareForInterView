/*바벨이란 ES6 이상의 문법을 ES5로 바꿔, 이전 버전의 브라우저 환경에서도 자바스크립트가 오류 없이 동작할 수 있도록 도와주는 역할을 합니다.

바벨은 크게 3가지의 동작 원리가 있습니다.

1단계 - 파싱(Parsing)

기존 소스 코드를 읽은 후, AST(추상 구문 트리)로 변환합니다.

쉽게 생각하자면, 소스 코드를 변경하기 쉬운 구조로 변환하는 사전 작업입니다.

2단계 - 변환(Transformation)

이전 단계에서 변환을 완료한 AST를 정해진 규칙에 맞게 변경합니다.

이 과정에서 ES6+의 문법이 ES5문법으로 변환된다고 할 수 있습니다.

3단계 - 출력(Printing)

ES6+에서 ES5로 코드가 변환되었지만 아직 AST(추상 구문 트리)인 상태입니다.

AST를 다시 소스 코드로 변환해줍니다.

위의 과정을 거치게 되면 ES6+ 문법의 코드를 ES5 문법의 코드로 변환됩니다.

추상 구문 트리가 뭔가요?

⇒ 우리가 쓴 코드들을 문법에 맞게 노드들로 쪼개어 만든 트리입니다.

트리를 만들기 위해 scaneer와 parser를 사용하게 됩니다.

스캐너는 어휘 분석기라고도 불리는데 문자를 하나씩 읽어 하나의 단위들로 분리시킵니다.

ex) let name = “윤성” 이라는 코드가 있으면

{value : ‘let’,  type:’keyword’}, {value:’name’, type:’identifier’}, {value:”윤성”,type : ‘literal’} 으로 분리시킵니다.

파서는 위에서 스캐너를 통해 만들어진 내용을 가져와 구문을 확인한 후 AST로 변환합니다.

이 때 문법적인 문제가 있는 경우 에러를 반환합니다.  

정해진 규칙이라고 하셨는데 규칙에 대해 간단하게 설명해주실수 있나요?

⇒ 간단하게 ES6부터 등장하는 스프레드 연산자(…) 코드를 concat이나 apply 등으로 변환해줄 수 있습니다.

이러한 규칙들을 플러그인이라고도 부릅니다.

개발을 하면서 플러그인을 하나만 쓰는 일은 없을 것이고, 여러 개의 플러그인 들을 조합해서 사용해야 하는데

일일이 추가하고 조합해서 쓰다보면 실수를 할 일이 있을 수 있습니다.

따라서 바벨에서 지원하는 프리셋 기능(플러그인들을 조합해 놓은 것)을 사용하여 편리하게 사용할 수 있습니다.*/
