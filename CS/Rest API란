Rest란 Representational State Transfer의 약자로, 자원을 이름으로 구분하여 해당 자원의 상태를 주고 받는 모든 것을 의미합니다.

즉,  REST란

1. HTTP  URI(Uniform Resource Identifier)를 통해 자원을 명시하고,
2. HTTP Method(GET,POST,PUT,DELETE)를 통해 
3. 해당 자원(URI)에 대한 CRUD를 하는 것입니다.

Rest의 구성 요소는 3가지가 있습니다.

1. 자원(Resource) : HTTP URI

모든 자원은 고유한 ID를 갖고 있고, 자원은 서버에 존재합니다.

자원을 구별하는 ID는 HTTP URI입니다.

클라이언트는 URI를 통해 자원을 지정하고, 해당 자원의 상태에 대한 조작을 서버에 요청합니다.

1. 행위 : HTTP Method

HTTP의 프로토콜 메소드(GET, POST, PUT, DELETE)를 사용합니다.

1. 표현 : HTTP Message PayLoad

클라이언트가 자원의 상태에 대한 조작을 요청하면, 서버는이에 대한 응답을 합니다.

자원은 JSON, XML, TEXT 등으로 표현되어 나타내질수 있으며 보통 JSON 혹은 XML을 통해 전달하는 것이 일반적입니다.

Rest의 특징은 다음과 같습니다.

1. 서버-클라이언트 구조(클라이언트가 요청하면 서버는 응답함)
2. Stateless(무상태)

각 요청 간 클라이언트의 내용이 서버에 저장되어서는 안됩니다.

서버는 각각의 요청을 별개의 것으로 인식하며 처리합니다.

1. 캐시 처리 가능

클라이언트는 응답을 캐싱할 수 있습니다.

1. Layered System(계층화)

REST 서버는 다중 계층으로 구성될 수 있습니다.

1. Uniform Interface(인터페이스 일관성)

URI로 지정된 Resource에 대한 조작은 통일된 인터페이스로 수행합니다.

Rest의 장단점은 다음과 같습니다.

장점

1. HTTP 프로토콜의 인프라를 그대로 사용하므로 REST API 사용을 위한 별도의 인프라를 구축할 필요가 없습니다.
2. HTTP 프로토콜을 따르는 모든 플랫폼에서 사용가능합니다.
3. REST API가 의도하는 메시지를 쉽게 파악할 수 있습니다.

단점

1. 사용할 수 있는 메소드가 한정적입니다.
2. 구형 브라우저(IE)에서 호환이 되지 않아 지원하지 못하는 동작이 있습니다.

Rest API 설계 원칙은 다음과 같습니다.

1. URI는 명사를 사용합니다.
2. /로 계층 관계를 표시합니다.
3. URI의 마지막 문자로 /를 사용하지 않습니다.
4. URI는 소문자로만 구성합니다.
5. HTTP 응답 상태 코드를 사용합니다.

Restful API란

REST의 설계 규칙을 잘 준수하면서 설계된 API를 말합니다.

Restful한 API는 요청을 보내는 주소만으로도 어떠한 역할을 하는지 알 수 있습니다.