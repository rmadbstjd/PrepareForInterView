CORS는 Cross-Origin Resource Sharing의 약자로 교차 출처 리소스 공유 정책이라고도 합니다.

이때 교차 출처란 출처가 다르다는 것을 의미합니다.

우리는 어떤 사이트를 접속할 때 주소창에 우리는 URL을 통해 접근합니다.

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/70d3e988-d27e-4d1b-90c5-565190ec0b61/Untitled.png)

URL은 Potocol, Host, Port, Path, QueryString, Fragment로 이루어졌고

출처는 Protocol, Host, Port만 포함한 URL입니다.

다음으로, 정책에는 Same-Origin 정책과 Cross Origin 정책이 있습니다.

먼저 SOP(Same-Origin Policy)는 단어 그대로 동일한 출처에 대한 원칙을 의미하고,

동일한 출처에서만 리소스를 공유할 수 있다는 원칙을 갖고 있습니다.

즉, 동일 출처 서버에 있는 리소스는 자유롭게 가져올 수 있지만

다른 출처(Cross-Origin) 서버에 있는 리소스는 가져올 수 없습니다.

이러한 동일 정책이 필요한 이유는 무엇일까요?

사실 출처가 다른 두 어플리케이션이 자유롭게 리소스를 공유하는 건 꽤 위험한 환경입니다.

해커가 CSRF(Cross-Site Request Forgery)나 XSS(Cross-site-Scripting) 등의 방법을 이용해

개인 정보를 가로챌 수 있습니다.

따라서 SOP의 정책은 이러한 악의적인 경우를 사전에 방지하는 것입니다.

그렇다면 어떻게 같은 출처인지 구분할 수 있을까요?

출처의 동일함은 두 URL의 구성 요소 중 Protocol, Host, Port 이 3가지만 동일하면 동일 출처로 판단합니다.

하지만 모든 다른 출처를 막아버릴수는 없으니 몇 가지 예외 조항을 두고 해당 조항에 부합할 경우

다른 출처와 리소스 공유가 되도록 허용했는데 그 중 하나가 바로 CORS 정책을 지킨 리소스 요청입니다.

즉, CORS 정책을 잘 따르면 SOP를 위반하더라도 다른 출처와 리소스가 공유 가능하다는 뜻입니다.

CORS 정책을 잘 따르기 위한 CORS 동작 과정을 설명드리겠습니다.

1. 클라이언트에서 HTTP 요청의 헤더에 Origin을 담아 전달합니다.

   기본적으로 웹은 HTTP 프로토콜을 이용해 서버에 요청을 보내고, 이때 브라우저는 요청 헤더에

   Origin이라는 필드에 출처를 함꼐 담아 보냅니다.

2. 서버는 응답 헤더에 Access-Control-Allow-Origin을 담아 클라이언트로 전달합니다.

   Access-Control-Allow-Origin 필드의 값에는 이 리소스를 접근하는 것이 허용된 url이 담겨있습니다.

3. 클라이언트에서 Origin과 서버가 보내준 Access-Control-Allow-Origin을 비교합니다.

   유효하다면 다른 출처의 리소스를 문제 없이 가져오고, 유효하지 않다면 응답을 사용하지 않고 버립니다(CROS 에러 발생).

즉, CORS 해결책은 서버의 허용이 절대적으로 필요합니다.
