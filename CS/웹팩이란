웹팩은 최신 프론트엔드 프레임워크에서 가장 많이 사용되는 모듈 번들러입니다.

웹팩에서 모듈이란 웹 어플리케이션을 구성하는 모든 자원들을 말합니다.

HTML, CSS, JAVASCRIPT, IMAGE, FONT 등 파일 하나하나가 모두 모듈입니다.

결국, 웹팩은 모듈을 번들링해주는 모듈 번들러입니다.

그렇다면 모듈 번들링이란 무엇일까요?

웹 어플리케이션을 구성하는 수많은 자원들을 하나의 파일로 합치는 동작을 모듈 번들링이라고 합니다.

우선 웹팩의 등장 배경에 대해 설명드리겠습니다.

웹팩이 등장한 이유는 크게 3가지입니다.

1. 파일 단위의 자바스크립트 모듈 관리의 필요성
    
    자바스크립트의 변수 유호 범위는 기본적으로 전역  범위를 갖습니다. 이 때문에 서로 다른 모듈에서 같은 이름의 변수명을 사용하면 의도치않은 동작이 일어날 수 있습니다.
    
    그렇다보니 파일 단위로 변수를 관리하고 싶고 자바스크립트를 모듈화시키고 싶어졌는데
    
    이전까지는 AMD, Common JS와 같은 라이브러리를 사용했습니다.
    
    AMD는  RequireJS, Common JS는 서로 다른 방식으로 동작하다보니 호환성 문제가 있었고
    
    이를 해결한 것이 바로 웹팩입니다.
    
    웹팩은 이 둘을 동시에 지원하고, 기본적으로 캐싱하여 변경점만 번들링하는 방식이기 때문에 속도도 더욱 빠릅니다.
    
2. 웹 개발 작업 자동화 도구
    
    이전 프론트엔드 개발을 할 때 가장 많이 반복되는 작업은 코드를 수정하고 저장한 뒤 브라우저에서 새로고침을 누르는 일이었습니다. 그래야 화면에 변경된 내용을 볼 수 있었습니다.
    
    이외에도 웹 서버를 개발하고 배포할 때 HTML,CSS,JS 압축, 이미지 압축, CSS 전처리기 변환 등의 작업을 해야했습니다.
    
    이러한 일들을 하기 위해 Gulp와 같은 라이브러리 등장했습니다.
    
    Gulp와 웹팩은 차이점은 Gulp는 종속성 관리를 할 수 없지만 웹팩은 종속성 관리를 할 수 있고 이는 큰 프로젝트에서 큰 장점을 갖습니다.
    
3. 웹 어플리케이션의 빠른 로딩 속도와 성능
    
    일반적으로 5초 안에 웹 사이트가 표시되지 않으면 대부분의 사용자들은 사이트에서 이탈을 하게 됩니다.
    
    따라서 웹 사이트의 로딩 속도를 높이기 위해 많은 노력들이 있었고 그 중 대표적인 방법이
    
    브라우저에서 서버로 요청하는 파일 갯수를 줄이기 위해 파일들을 압축하고 병합하였습니다.
    
    뿐만 아니라 초기 페이지 로딩 속도를 높이기 위해 필요한 자원들을 나중에 요청하는
    
    레이지 로딩(Lazy Loading)이 등장했습니다.
    
    웹팩은 기본적으로 자원이 필요할 때, 그 때 그 떄 요청하자는 철학을 갖고 있고,
    
    웹팩의 코드 스플리팅 기능을 이용해 원하는 모듈을 적절한 타이밍에 로딩할 수 있습니다.