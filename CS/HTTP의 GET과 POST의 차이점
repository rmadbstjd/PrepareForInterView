GET 방식은 요청을 전송할 때 필요한 데이터를 body에 담지 않고, 쿼리 스트링을 통해 전송합니다.

URL의 끝에 ?과 함께 이름과 값으로 쌍을 이룬 요청 파라미터를 쿼리 스트링이라고 합니다.

만약 요청 파라미터가 여러개면 &를 사용하여 연결합니다.

쿼리스트링을 포함한 URL의 샘플은 아래와 같습니다. 여기서 요청 파라미터명은 name1, name2이고, 각각의 파라미터는 value1, value2라는 값으로 서버에 요청을 보내게 됩니다.

**www.example-url.com/resources?name1=value1&name2=value2**

그리고 GET은 불필요한 요청을 제한하기 위해 요청이 캐싱될 수 있습니다.

양이 크고 변경될 일이 적은 정적인 컨텐츠들은 반복해서 요청을 보낼 필요가 없습니다.

따라서 정적인 컨텐츠들은 요청하고 나면 브라우저에서 요청을 캐시하고, 동일한 요청이 발생할 때

서버로 요청을 보내지 않고 캐싱된 데이터를 사용합니다.

GET 요청의 특징은

1. 캐시가 가능하다
2. 요청에 길이 제한이 있다.
3. 중요한 정보를 다루면 안된다.

POST 방식은 리소스를 생성/변경하기 위해 필요한 데이터를 body에 담아 보냅니다.

body에 데이터가 담기기 때문에 GET보다 보안적인 측면에서 안전하다고 생각할 수 있지만, 개발자 도구로 요청 내용을 확인할 수 있기 때문에 민가함 정보의 경우, 암호화하여 전송해야합니다.

POST 요청의 특징은

1. 캐시되지 않는다.
2. 요청에 길이 제한이 없다.

GET과 POST의 차이점은

1. 사용목적

GET은 서버의 리소스에서 데이터를 요청할 때, POST는 서버에 리소스를 생성하거나 업데이트할 때 사용된다.

1. 요청에 body 유무

GET은 URL 파라미터에 요청에 필요한 데이터를 담기 때문에 body가 없고, POST는 필요한 데이터를 body에 담기 때문에 body가 존재합니다.

1. 멱등성

get 요청은 멱등이며, post 요청은 멱등이 아닙니다.

멱등의 사전적 정의는 연산을 여러 번 적용하더라도 결과가 달라지지 않음을 의미합니다.

이때 중요한 것은 결과는 서버의 응답 상태 코드가 아닌 서버의 상태입니다.

get 요청은 여러 번 요청해도 서버의 상태가 바뀌지 않기 때문에 멱등성을 갖으며,

post 요청은 여러 번 요청하면 서버의 응답 상태 코드는 같더라도 매번 새로운 리소스가 생겨나므로

서버의 상태가 변경되기에 멱등성을 갖지 않습니다.
