Redux는 가장 많이 사용되는 상태 관리 라이브러리입니다.

**Redux의 등장배경**

React를 사용하면서 state 끌어올리기에 부담을 느끼거나 props drilling의 문제점으로 인해 전역 상태 관리법이 필요해졌고 그로 인해 Redux가 등장하였습니다.

**Redux의 작동원리**

1. 상태를 변경시키는 이벤트가 발생하면 변경될 상태에 대한 정보가 담긴 Action 객체를 생성합니다.
2. Action 객체는 Dispatch 함수의 파라미터로 전달된다.
3. Dispatch 함수는 Action 객체를 Reducer 함수에게 전달합니다.
4. Reducer 함수는 Action 객체의 값을 확인 후, 단일 전역 상태 저장소인 Store의 상태를 변경합니다.
5. 상태가 변하면 React는 리렌더링을 합니다.

**Redux의 특징**

1. Redux는 단일 스토어입니다.

   하나의 어플리케이션은 하나의 스토어를 갖고 있는 것을 권장합니다.

2. Redux는 상태는 읽기 전용이어야합니다.

   상태는 직접 변경할 수 없고, 오직 Action 객체를 사용해서 변경해야한다.

3. Reducer는 순수 함수여야합니다.

   기존 state를 직접 수정하는 경우, redux의 변경 감지 알고리즘이 state 객체의 주소 값을 비교하기 때문입니다.

   객체는 참조형 데이터이며, 참조형 데이터의 특징은 주소값을 가진다는 것 입니다. reducer를 순수함수 형태로 반환한다면, 새로운 주소값이 생성되고 이를 통해 state가 변경되었음을 감지하여, 새로운 변화를 적용시킵니다. 만약 기존의 state 값을 직접 수정하게 된다면 원래 있는 주소값은 그대로 보존된 체, 해당 값만 바뀌게 되며, redux가 인지하지 못하는 상황이 발생하게 됩니다.

**Redux의 단점**

1. 스토어를 구성하는 것이 복잡하다.
2. 너무 많은 코드를 작성해야한다.

**Redux-Thunk는 무엇인가요?**

Redux는 기본적으로 동기적으로 실행되기 때문에, 비동기 통신을 통해 받아 온 결과 값으로 state를 업데이트 하기 위해서는 외부 미들웨어 라이브러리를 사용해야합니다.

Thunk는 특정 작업을 나중에 할 수 있도록 미루기 위해 함수 형태로 감싼 것입니다.

Redux는 action 객체를 dispatch하여 reducer에 전달합니다.

이 때 Redux-thunk 미들웨어를 사용하면 action 객체 뿐만 아니라 thunk 함수를 만들어서 dispatch 할 수 있습니다.

즉, thunk 미들웨어에서는 action 안에 type과 payload뿐만 아니라 API요청이나 비동기 처리 로직이 들어갈 수 있습니다.

**Redux-Saga는 무엇인가요?**

Redux-saga는 generator 기반으로 동작하는 미들웨어입니다. Redux-saga는 제네레이터 함수 문법을 기반으로 작업을 관리합니다. Redux-saga는 우리가 dispatch하는 action을 모니터링해서 그에 따라 필요한 작업을 따로 수행하는 방식으로 동작합니다.

**Redux-Thunk와 Redux-Saga의 차이점은 무엇인가요?**

redux-thunk는 함수를 만들어서 해당 함수에서 비동기 작업을 하고 action 객체 뿐만 아닌 함수까지 dispatch를 하고,

redux-saga는 특정 action을 모니터링하고, 그 action 발생시 이에 따라 제네레이터 함수를 실행하여 비동기 작업을 처리 후 action을 dispatch합니다.
