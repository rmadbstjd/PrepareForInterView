React Hook은 함수형 컴포넌트에서 상태관리와 생명주기 기능을 사용할 수 있도록 도와주는 함수입니다. Hook은 클래스 컴포넌트 안에서는 작동하지 않고, 클래스 없이 리액트를 사용할 수 있게 해줍니다.

Rect Hooks이 등장한 이유

1. Hook을 활용하면 상태 관련 로직을 추상화해 독립적인 테스트와 재사용이 가능해 변화없이 재사용할 수 있습니다.
2. 기존의 라이프 사이클 메소드 기반이 아닌 로직 기반으로 나눌 수 있어서 컴포넌트를 함수 단위로 잘게 쪼갤 수 있습니다.

React Hook을 사용하기 위한 규칙

1. 최상위 레벨에서만 Hook을 호출해야합니다.
    
    반복문 조건문, 중첩된 함수 내에서 Hook을 실행하면 안됩니다.
    
    이 규칙을 따르면 컴포넌트가 렌더링 될 때 마다 동일한 순서로 Hook이 호출되는 것을 보장합니다.
    
2. 리액트 함수 컴포넌트에서만 Hook을 호출해야 합니다.
    
    일반 자바스크립트 함수에서는 호출이 불가능합니다.
    
3. 반복된 로직을 재사용하기 위해 커스텀 훅을 만들 땐 use로 시작하는 함수 이름으로 작성되어야합니다.

React Hook의 종류

1. useState
    
    상태를 관리합니다. useState를 사용해서 상태 변수를 선언하고, 해당 상태를 업데이트하는 함수를 반환합니다.
    
2. useEffect
    
    컴포넌트의 생명주기를 관리합니다. 화면에 렌더링이 완료된 후에 수행되며, componentDidMount와 componentDidUpdate, componentWillUnMountrk가 합쳐진 것입니다.
    
    만약 화면을 다 그리기 전에 동기화 되어야 하는 경우에는 useLayoutEffect를 활용하여 컴포넌트 렌더링 ⇒ useLayoutEffect 실행 ⇒ 화면 업데이트 순으로 effect를 실행시킬 수 있습니다.
    
3. useReducer
    
    useState의 대체 함수로 컴포넌트의 상태 업데이트 로직을 컴포넌트에서 분리시킬 수 있습니다.
    
    컴포넌트 바깥에 로직을 작성할 수 있습니다. reducer란 현재 상태와 액션 객체를 파라미터로 받아와서 새로운 상태를 반환해주는 함수입니다.
    
4. useRef
    
    특정 DOM 요소의 접근하여 객체 형식으로 관리할 수 있습니다.
    
5. useMemo
    
    메모제이션을 통해 이미 연산 된 값을 리렌더링시에 다시 계산하지 않도록 합니다.
    
    의존성 배열의 값이 변경됐을 때만  다시 계산합니다. 의존성 배열이 없는 경우, 렌더링 마다 값을 다시 계산합니다.
    
6. useCallback
    
    반복적으로 사용되는 함수를 메모제이션합니다. 의존성 배열의 값이 변경됐을 때 함수를 재생성합니다.
    
7. useContext
    
    부모 컴포넌트와 자식 컴포넌트간의 변수와 함수를 전역적으로 정의할 수 있습니다.