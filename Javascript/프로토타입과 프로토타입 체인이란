/*
**프로토타입이란**

OOP의 상속 개념과 같이 부모 객체의 프로퍼티와 메소드를 상속받아 사용할 수 있는데 이 때,

부모 객체를 프로토타입이라고 합니다.

클래스 기반 객체지향 언어는 클래스를 정의하고 이를 통해 객체 인스턴스를 생성하지만,

프로토타입 기반 언어는 클래스 문법 없이 객체를 생성할 수 있습니다.

**일반 클래스 언어와 프로토타입 언어의 차이점**

클래스 기반 언어는 Class라는 틀 자체를 상속시킵니다. 상속시킨 틀을 이용해서 객체를 생성합니다.

프로토타입 언어는 객체들을 프로토타입으로 연결시킵니다. 클래스라는 개념이 없기 때문에 객체들을 연결할 수 밖에 없습니다.

**자바스크립트에도 Class 문법이 추가되었지 않나요?**

Class 키워드를 사용하는 건 단지 클래스 기반 언어처럼 작성하기 위한 Sugar syntax 일뿐,

프로토타입 기반으로 동작하는 건 변함이 없습니다.

자바스크립트의 모든 객체는 자신의 부모 역할을 담당하는 객체와 연결되어있다.

이것은 OOP의 상속 개념과 같이 부모 객체의 프로퍼티와 메소드를 상속받아 사용할 수 있습니다.

이러한 부모 객체를 프로토타입 객체 혹은 프로토타입이라고 합니다.

자바스크립트의 모든 객체는 [[Prototype]]이라는 내부 슬롯을 갖고 있고 ,이 값은 null 또는 객체이며 상속을 구현하는데 사용됩니다.

[[Prototype]]의 값은 프로토타입 객체(부모 객체)입니다. 

[[Prototype]]과 ‘prototype’ 프로퍼티의 차이점

[[prototype]]은 모든 객체의 내부 슬롯으로 갖고있고, 이는 객체의 부모 객체인 프로토타입을 가르키는 값입니다.

하지만 ‘prototype’ 프로퍼티는 모든 객체가 갖고 있는 것이 아닙니다.

함수 객체에만 ‘prototype’ 프로퍼티를 갖고 있으며 해당 함수로부터 생성된 객체들의 프로토타입이 됩니다.

**프로토타입 체인이란**

자바스크립트는 특정 객체의 프로퍼티나 메소드에 접근하려고 할 때 해당 객체에  프로퍼티 또는 메소드가  없다면 [[Prototype]]이 가르키는 링크를 따라 자신의 부모 역할을 하는 프로토타입 객체의 프로퍼티나 메소드를 차례대로 검색합니다. 이것을 프로토타입 체인이라고 합니다.

만약 프로토타입 체인의 종착지인 Object.prototype까지 검색했는데 없다면 undefined를 반환합니다.
*/