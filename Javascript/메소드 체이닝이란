/*
**메서드 체이닝이란**

객체의 메소드를 연속적으로 호출하여 한 줄의 코드에서 여러 작업을 수행하는 방법입니다.

각 메소드 호출은 동일한 객체에 대해 이어지며, 호출된 메소드는 일반적으로 객체 자신을 반환하여 다음 메소드를 호출이 가능하게 합니다.

**메서드 체이닝을 사용하는 이유**

코드의 가독성과 작성 편의성을 높일 수 있습니다. 

만약 메서드 체이닝을 사용하지 않으면 각 메소드마다 중간 결과를 변수에 할당해야합니다.

**메서드 체이닝 사용 예시**

const numbers = [1, 2, 3, 4, 5];

const sum = numbers
.filter(num => num % 2 === 0) // 짝수만 필터링
.map(num => num * 2) // 각 숫자를 2배로 매핑
.reduce((acc, curr) => acc + curr, 0); // 모든 숫자를 더해서 합산

console.log(sum); // 18

// 메서드 체이닝을 사용 안한 예시

const numbers = [1, 2, 3, 4, 5];

const filteredNumbers = numbers.filter(num => num % 2 === 0); // 짝수만 필터링
const mappedNumbers = filteredNumbers.map(num => num * 2); // 각 숫자를 2배로 매핑
const sum = mappedNumbers.reduce((acc, curr) => acc + curr, 0); // 모든 숫자를 더해서 합산

console.log(sum); // 18
*/
