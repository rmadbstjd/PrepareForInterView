**스코프란**

변수, 함수, 클래스 이름과 같은 식별자가 본인이 선언된 위치에 따라 다른 코드에 의해 자신이 참조될 수 있을지 없을지를 결정되는 것입니다.

자바스크립트에서는 블록 스코프와 함수 스코프가 있습니다.

1. **블록스코프**
    
    블록 스코프는 중괄호 { }로 둘러싸인 범위를 말합니다.
    
    let과 const로 선언된 변수는 블록 스코프를 갖습니다. 
    
    블록 스코프 변수는 선언된 블록 내에서만 접근 가능하며, 블록 외부에서는 접근할 수 없습니다.
    
2. **함수 스코프**
    
    함수 스코프는 함수 내에서 선언된 변수가 해당 함수 내부에서만 유효한 범위를 갖는 것을 말합니다. 함수 내에서 선언된 변수는 해당 함수 내부에서 접근 가능하며, 함수 외부에서는 접근할 수 없습니다.
    

**스코프 체인(Scope Chain)이란**

현재 스코프에서 식별자(변수나 함수의 이름)를 검색할 때, 상위 스코프를 연쇄적으로 찾아나가는 방식입니다.

자바스크립트 엔진은 변수를 참조할 때 스코프 체인을 통해 참조합니다.

현재 함수가 어떠한 변수를 참조하려고 할 때, 자신의 스코프 안에 찾고 있는 변수가 없을 경우,

한 단계 상위 스코프의 변수를 참조하게 됩니다. 만약 한 단계 상위 스코프에 원하는 변수가 없을 경우, 또 다시 한 단계 위의 상위 스코프를 찾아가며, 마지막으로는 전역 스코프까지 도달하게 됩니다.

전역 스코프에서조차 원하는 변수가 없을 경우, 그때서야 Reference Error를 반환하게 됩니다.

**동적 스코프와 정적 스코프(렉시컬 스코프)**

상위 스코프가 결정되는 시점을 기준으로 동적 스코프와 정적 스코프로 나뉩니다. 

**동적 스코프**는 함수가 어디서 호출되었는지에 따라 상위 스코프를 결정하는 것입니다.

프로그램 런타임 도중 실행 컨텍스트나 호출 컨텍스트에 의해 스코프가 결정되는 것을 의미합니다.

**정적 스코프(렉시컬 스코프)**는 함수를 어디서 선언하였는지에 따라 상위 스코프를 결정하는 것입니다.

자바스크립트는 정적 스코프를 따르기 때문에 함수는 태어나자마자 상위 스코프가 결정이 되고,

이후에 해당 함수에 의해 함수 객체가 생성이 되면, 해당 함수 객체는 본인의 상위 스코프를 항상 알 수 있게 됩니다.

이렇게 해당 함수가 상위 스코프를 알 수 있는 이유는,

**자바스크립트에서 함수는 태어나면서 자신의 내부 슬롯안에 상위 스코프의 참조를 저장하기 때문입니다.**

그렇게 생성된 함수가 어디선가 호출이 되면, 자바스크립트에 의해 다음과 같은 흐름이 진행됩니다.

1. 호출된 함수의 실행 컨텍스트 생성
2. 생성된 실행 컨텍스트를 실행 컨텍스트 스택에 푸쉬
3. 함수는 본인의 렉시컬 환경을 생성
    
    렉시컬 환경이란 어떠한 코드가 어디서 실행이 되고, 본인 주변에 어떤 코드들이 있는지에 대한 정보를 담고 있는 환경입니다.
    
    렉시컬 환경에는 해당 함수의 식별자, 식별자에 바인딩된 값 등을 저장한 하나의 자료구조입니다.
    
4. 호출된 함수의 실행이 끝나면 실행 컨텍스트 스택에서 해당 함수를 POP합니다.