1. javascript 런타임

런타임이란 해당 프로그래밍 언어로 작성된 코드가 작동되는 환경을 말한다.

웹 브라우저와 Node.js가 대표적인 Javascript 런타임이다.

웹 브라우저의 Javascript 런타임은 크게 두 가지의 구성 요소로 이루어져있다.

바로 Javascript 엔진과 웹 API이다.

이 중에서 Javascript 엔진이 Javascript 코드를 읽고 해석해서 실행하는 것을 담당하며,

이는 싱글 쓰레드로만 동작한다. 따라서 Javascript를 흔히 단일 쓰레드 기반 프로그래밍 언어라 불리는 이유이다. 

가장 유명한 Javascript 엔진은 크롬 브라우저의 V8 엔진이다.

그러나 Javascript 런타임은 Javascript 엔진으로만 구성되는 것이 아니다.

Javsacript 엔진의 옆에는 웹 API가 있다.

또한, Javascript 내부에도 Task Queue와 Event Loop라는 개념이 존재한다.

이러한 것들로 인해 Javascript가 비동기적인 코드를 실행할 수 있게 되는 것이다.

Javascript가 동작하고 있는 런타임 환경에서는 다양항 방식을 활용해서 멀티 스레딩 같은 효과를 얻을 수 있다.

자바스크립트 엔진은 크게 메모리 힙과 콜 스택으로 나뉘어져있다.

메모리 힙에는 변수를 선언해서 오브젝트, 문자열, 숫자 등을 할당하게되면 그 데이터들은 전부 

메모리 힙에 저장된다. ⇒ 잘못됨 메모리 힙에는 참조 타입의 데이터가 저장됨. 콜스택은 원시 타입의 데이터가 저장되고..

콜 스택은 우리가 함수를 실행하는 순서에 따라서 LIFO 형태로 함수를 쌓는다.

이 콜스택이 하나이기 때문에 싱글 스레드라 불린다.

1. Web API

Web API에는 DOM API, setTimeout, setInterval, fetch, eventListener 등이 있다.

web API는 브라우저에서 제공하는 API이기 때문에 브라우저의 멀티 스레딩을 이용해서 조금 더

다양한 일들을 동시에 실행할 수 있다.

그 중 대표적으로, fetch를 이용해 백엔드에서 데이터를 받아오는 함수나, setTimeOut을 이용해서

일정 기간의 시간이 지나면 우리가 등록한 콜백 함수를 실행하는 함수가 있다.

그렇다면 Javascript 엔진은 어떤 방식으로 비동기 처리를 할 수 있을까?

콜 스택에서 실행된 비동기 함수는 Web API로 이동하고, Web API는 비동기 함수의 콜백 함수를

Callback Queue에  넣어진다.

ex) addEventListener(’click’, function() {…})

버튼에 클릭 이벤트 리스너를 등록해놓으면 브라우저에서는 버튼이 클릭될 때,

즉,  클릭이라는 이벤트가 발생될때 Web API에서 우리가 등록한 콜백 함수를 Callback Queue 안에다가 넣는다.  

1. Callback Queue

비동기적으로 실행된 콜백 함수가 보관 되는 영역이다. 자료구조 Queue의 FIFO 형태이다.

이 구조가 중요한 이유는 각각 들어가는 콜백 함수들의 종류가 다르고, 들어가는 큐에 따라서 

이벤트 루프가 내보내는 우선 순위 역시 달라지기 때문이다.

Callback Queue에는 크게 세 종류가 있다.

Task Queue : Web API에서 우리가 흔하게 등록하는 콜백 함수가 들어간다.

Microtask Queue : 우리가 흔히 사용하는 Promise에 등록된 콜백, 즉 Promise가 다 수행이 되고 난 후 .then()에 등록한 콜백 함수가 있고,

Web API의 한 가지인 mutation observer의 콜백이 Microtask Queue에 저장된다.

만약, 서버에서 데이터를 받아오는 fetch를 이용해서 promise를 만들고, promise의 .then()에 

콜백함수를 등록해놓았다면 promise가 resolve가 될 때, 그때 등록된 콜백 함수가 들어온다.

Animation Frames : 

브라우저에서 우리가 변형한 코드가  업데이트 되기 위해서 주기적으로 호출되는 순서인데, 

그 전에 Request Animation Frame이라는 API를 부르면 그 때 우리가 등록한 콜백은 Request Animation Frame Queue에 차곡차곡 쌓인다.

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ef4e9ae8-2793-4eb8-8f6e-3eb2a79e6210/Untitled.png)

그렇다면 브라우저는 어떻게 순서대로 실행할까?

Event Loop는 코드를 살펴보면 while(true) { do something }와 같은 루프 중에 하나이다.

그렇다면 Callback Queue의 함수들은 언제 실행될까?

이벤트 루프가 비동기 작업을 처리하는 우선 순위는 Microtask Queue → Animation Frames → Task Queue 순이다.

또한 이벤트 루프는 Microtask Queue나 Animation Frames를 방문할 땐, 큐 안에 있는 모든 작업을 수행한 후에 순회하지만, Task Queue를 방문했을 땐 하나의 작업만 콜 스택으로 이동시키고 순회한다.

1. Event Loop

이벤트 루프는 콜 스택과 콜백 큐의 상태를 주기적으로 확인한다.

이때, 콜 스택이 비어있다면 콜백 큐의 첫 번째 콜백 함수 하나를 콜 스택으로 이동시킨다.

만약 콜백 큐에 여러 개의 콜백 함수가 쌓여있다고 가정하자.

이벤트 루프가 콜 스택과 콜백 큐를 주시하다가 콜 스택이 비어있다는걸 확인하면

여러 개의 콜백 함수들은 한 번에 콜 스택에 이동시키는 것이 아니라,

가장 첫 번째의 콜백 함수만을 이동시키고, 그 콜백 함수가 실행되면 그 다음 콜백 함수를 이동시킨다.

이러한 반복적인 행위를 틱(tick)이라고 부른다.