/*
우선 원시 타입이나 참조 타입의 데이터들이 어디에 저장되는지에 대해 설명드리겠습니다.

원시 타입(String, Number, BigInt, Null, Undefined, Boolean, Symbol)은 콜 스택에 저장됩니다.

반면 참조 타입(Object, Array, Function)은 메모리 힙에 저장됩니다.

콜 스택과 메모리 힙은 주소와 값의 영역으로 이루어져있습니다.

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7325d855-3a8d-400c-a503-f73e4b868c80/Untitled.png)

**원시 타입의 변수 선언과 할당 순서**

예를 들어 let a = 10; 을 선언했다고 가정해보겠습니다.

1. 메모리의 빈 공간에 변수명(식별자)이 a와 변수 값을 undefined를 할당합니다.
2. 10은 원시타입이기 때문에  콜 스택에 새로운 메모리 주소가 할당되고, 원시값 10을 저장합니다.
3. undefined였던 a의 변수 값에 메모리 주소를 할당합니다.

**원시 타입의 불변성**

만약 변수 a에 20을 재할당하면 어떻게 될까요?

변수 a가 가르키고 있던 주소의 데이터 값을 20으로 변경하는게 아닌,

새로운 메모리를 확보하여 20을 저장하고, 변수 a에 새로운 주소 값을 저장합니다.

(이 때 20이라는 값이 메모리에 이미 저장되어있다면 새로운 메모리를 확보하는 것이 아닌 20이라는 값이 저장된 메모리 주소를 가져옴)

이는 원시 타입의 불변성 때문입니다.

**가비지 콜렉터**

이처럼 더이상 참조되지 않는 메모리들은 일정 주기가 지나면 가비지 콜렉터에 의해 삭제됩니다.

**참조 타입의 변수 선언과 할당 순서**

예를 들어, let person = { age : 27, name : ‘Yunseong’} 라고 선언해보겠습니다.

1. 빈 공간의 메모리에 변수 명(식별자)이 person과 변수 값 undefined를 저장합니다.
2. 콜 스택에 새로운 메모리 주소가 할당되고, 값에는 변수 age와 name을 가르키는 메모리 주소가 저장됩니다.
3. 변수 age와 변수 name에는 각각 변수 값으로 원시 값인 29와 ‘Yunseong’을 가르키는 메모리 주소를 저장합니다.
4. 변수 명이 person인 메모리의 변수 값이 undefined에서 콜 스택의 메모리 주소가 할당됩니다.

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/61a66cba-898a-4e76-b284-3d3a12d8a5ae/Untitled.png)

**참조 타입의 가변성**

만약 변수 person의 name을 ‘yunseong’에서 ‘kumyunseong’으로 바뀐다면 어떻게 될까요?

원시 타입처럼 새로운 메모리를 생성하고 재할당을 하는 것이 아닌 기존 내부의 값이 변경됩니다.

바로 이 부분 때문에 참조 타입을 가변성이 있다고 하는 것입니다.

객체를 할당한 변수 person은 재할당 없이 내부의 값을 변경,추가 및 삭제를 할 수 있습니다.

만약 객체가 할당된 변수를 다른 변수에 할당하면 어떻게 될까요?

ex) let copyPerson = person;

원본의 참조 값이 복사되어 전달됩니다.

값 자체를 복사한 것이 아니라 참조 값이 복사된 것이기 때문에 값의 공유가 일어납니다.

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/1c9288d8-14f0-4140-93a4-daaffd383858/Untitled.png)

만약 값 공유를 방지하고 새로운 객체를 만들고 싶다면 spread 연산자(…)를 사용하면 됩니다.

let a = [1,2,3]

let c = […a];

console.log(a===c) // false

위의 글을 완벽하게 이해했다면 아래의 비교의 값을 이해할 수 있습니다.

let a = 10;

b = a;

a===b // true

let a = 10;

let b = 10;

a===b // true ⇒ JS 엔진은 최적화를 위해 메모리를 공유하므로 b는 새로운 메모리를 생성하는 것이 아닌 a의 주소 값을 참조한다.

let person1 = {age : 27, name:’yunseong};

let person2 = person1;

person1 === person2 // true 같은 주소 값을 참조하기 때문에  true이다.

let person1 = {age : 27, name:’yunseong};

let person2 =  {age : 27, name:’yunseong}

person1 === person // false 안의 데이터는 같지만 서로 다른 주소를 참조하기 때문에 false이다.

서로 다른 주소를 참조하는 이유는 만약 person1과 person2가 같은 메모리 주소를 가르키게 되면

person2를 변경 시 person1도 변경되어 의도치 않은 문제가 발생할 수 있기 때문.. let a= 1, let b=2 a ===b가 true인 이유는 불변성을 갖고 있기 때문에 b를 변경해도 새로운 메모리가 생성될 뿐 기존 a가 가르키는 메모리가 변경되지 않음.
*/
